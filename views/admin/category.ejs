<%- include('../partials/admin/header.ejs') %>




<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<body class="bg-gray-100 font-sans">
    <div class="container mx-auto px-4 py-8">
      <div class="flex flex-col md:flex-row justify-between items-center mb-6">
        <h1 class="text-2xl font-bold text-gray-800">Category Management</h1>
        <button id="addNewBtn" class="mt-4 md:mt-0 px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors flex items-center">
          <i class="fas fa-plus mr-2"></i> Add New
        </button>
      </div>
      
      <div class="w-full md:w-1/3 mb-6">
        <form action="/admin/categories" method="get">
          <div class="relative">
            <input type="text" name="search" placeholder="Search categories..."
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            <button type="submit" class="absolute right-2 top-2 text-gray-500 hover:text-blue-500">
              <i class="fas fa-search"></i>
            </button>
          </div>
        </form>
      </div>
      
      <div class="bg-white shadow-md rounded-lg overflow-hidden">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Name</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Description</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Offer</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
              <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">Actions</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            <% cat.reverse().forEach((category) => { %>
            <tr>
              <td class="px-6 py-4 text-sm font-medium text-gray-900"><%= category.name %></td>
              <td class="px-6 py-4 text-sm text-gray-500"><%= category.description %></td>
              <td class="px-6 py-4 text-sm text-gray-900"><%= category.categoryOffer ? category.categoryOffer + '%' : 'No Offer' %></td>
              <td class="px-6 py-4">
                
                 <% if(category.isListed) {%>

                 <span class="px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
                    Listed
                </span>
                <% }else {%>
                <span class="px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800">
                    Unlisted
                </span>
                <% } %> 
              </td> 
             
              <td class="px-6 py-4 flex flex-wrap justify-center gap-2">
                <!-- Edit button -->
                <button class="text-blue-600 hover:text-blue-900 p-1" title="Edit">
                  <a href="/admin/editCategory?id=<%=category._id %>">
                  <i class="fas fa-edit"></i>
                </a>
                </button>
                
                <!-- Delete button -->
                 <!-- <form action="/admin/deleteCategory/?id=<%=category._id %>" method="post">
                <button class="text-red-600 hover:text-red-900 p-1" title="Delete">
                    <i class="fas fa-trash-alt"></i>
                </button>
                </form> -->
                
                <!-- Offer management buttons -->
                 <% if(category.categoryOffer ===0){%>
                    <button 
                    class="text-green-600 hover:text-green-900 p-1" 
                    title="Add Offer" 
                    onclick="addOffer('<%=category._id %>')">
                    <i class="fas fa-plus-circle"></i>
                </button>
                
                <% }else{ %>
                <button 
                class="text-yellow-600 hover:text-yellow-900 p-1" title="Remove Offer"
                onclick="removeOffer('<%=category._id %>')"">
                  <i class="fas fa-minus-circle"></i>
                </button>
                <% } %>
                <!-- Status management buttons -->
                 <% if(category.isListed){ %>
                <button class="text-blue-600 hover:text-blue-900 p-1 title="List">
                    <a href="/admin/listCategory?id=<%=category._id %>">
                  <i class="fas fa-toggle-on"></i>
                  </a>
                </button>
                <% } else {%>
                <button class="text-gray-600 hover:text-gray-900 p-1  title="Unlist">
                    <a href="/admin/unListeCategory?id=<%=category._id %>">
                        <i class="fas fa-toggle-off"></i>
                    </a>
                </button>
                <% } %>
              </td>


            </tr>
            <% }) %>
          </tbody>
        </table>
      </div>
    </div>
  
    <!-- Add/Edit Category Modal -->
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center hidden" id="categoryModal">
      <div class="bg-white rounded-lg max-w-md w-full mx-4">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-semibold text-gray-900">Add New Category</h3>
        </div>
        <form class="p-6" id="categoryForm">
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-1" for="name">Category Name</label>
            <input type="text" id="name" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            
          </div>
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-1" for="description">Description</label>
            <textarea id="description" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
          </div>
          <div class="flex justify-end pt-4">
            <button type="button" id="cancelBtn" class="mr-2 px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
              Cancel
            </button>
            <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors duration-300">
              Save Category
            </button>
          </div>
        </form>
      </div>
    </div>
  
    <script>
    document.getElementById('categoryForm').addEventListener('submit', function (e) {
    e.preventDefault();
    
    if (!validateForm()) return;

    const name = document.getElementById('name').value.trim();
    const description = document.getElementById('description').value.trim();

    fetch('/admin/addCategory', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, description })
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(err => { throw new Error(err.error); });
        }
        return response.json();
    })
    .then(data => {
        location.reload();
    })
    .catch(error => {
        Swal.fire({
            icon: 'error',
            title: 'Oops',
            text: error.message === 'Category already exists' ? "Category already exists" : "An error occurred while adding the category"
        });
    });
});




async function addOffer(categoryId) {
    const { value: amount } = await Swal.fire({
        title: "Offer in percentage",
        input: 'number',
        inputLabel: 'Percentage',
        inputPlaceholder: "%"
    });
    
    if (amount) {  
        try {
            const response = await fetch('/admin/addCategoryOffer', {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    percentage: amount,
                    categoryId: categoryId
                })
            });
            
            const data = await response.json();
            if (response.ok && data.status == true) {
                Swal.fire(
                    "Offer added",
                    'The offer has been added',
                    "success"
                ).then(() => 
                    location.reload()
                );
            } else {
                Swal.fire(
                    "Failed", 
                    data.message || 'Adding offer failed', 
                    "error"
                );
            }
        } catch (error) {
            Swal.fire(
                "Error",
                "An error occurred while adding the offer",
                "error"
            );
            console.log("Error while adding offer:", error.message);
        }
    }
}

async function removeOffer(categoryId) {
    
    try {
        
        const response = await fetch('/admin/removeCategoryOffer',{

            method:'POST',
            headers:{
                "content-type" : "application/json"
            },
            body:JSON.stringify({
                categoryId:categoryId
            })
        })

        const data = await response.json()

        if(response.ok && response.json){
            Swal.fire(
                "Offer removed",
                "The offer has been removed"
            ).then(()=>{
                location.reload()
            })
        } else{
            Swal.fire(
                "Failed",data.message||"Removing offer failed","error"
            )
        }

    } catch (error) {
        Swal.fire(
            "Error",
            "An error occured while removing the offer",
            "error"

        );
        console.log("Errro removing offer",error)
        
    }

}

function validateForm() {
    clearErrorMessages();
    
    const name = document.getElementById('name').value.trim();
    const description = document.getElementById('description').value.trim();
    let isValid = true;

    if (name === "") {
        showError("name", "Please enter a category name.");
        isValid = false;
    }

    if (description === "") {
        showError("description", "Please enter a description.");
        isValid = false;
    }

    return isValid;
}

function showError(inputId, message) {
    const inputElement = document.getElementById(inputId);
    let errorElement = inputElement.nextElementSibling;

    if (!errorElement || !errorElement.classList.contains("error-message")) {
        errorElement = document.createElement("p");
        errorElement.className = "error-message text-red-500 text-sm mt-1";
        inputElement.parentNode.appendChild(errorElement);
    }
    
    errorElement.textContent = message;
}

function clearErrorMessages() {
    document.querySelectorAll(".error-message").forEach(error => error.remove());
}

// Modal toggle functionality
document.getElementById('addNewBtn').addEventListener('click', () => {
    document.getElementById('categoryModal').classList.remove('hidden');
});

document.getElementById('cancelBtn').addEventListener('click', () => {
    document.getElementById('categoryModal').classList.add('hidden');
});


document.querySelectorAll('.delete-btn').forEach(button => {
        button.addEventListener('click', async function() {
            const categoryId = this.getAttribute('data-id');

            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, delete it!"
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/admin/deleteCategory/${categoryId}`, {
                            method: "DELETE",
                        });

                        const data = await response.json();

                        if (response.ok) {
                            Swal.fire("Deleted!", data.message, "success").then(() => {
                                location.reload(); // Refresh the page
                            });
                        } else {
                            Swal.fire("Error!", data.error, "error");
                        }
                    } catch (error) {
                        Swal.fire("Error!", "Something went wrong!", "error");
                    }
                }
            });
        });
    });

    </script>
  </body>
  </html>
  

  

